pipeline {
    agent any
    environment {
        IMAGE_NAME = 'toph2490/my_to_do_list'
        VERSION = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t myapp .
                    docker tag myapp ${IMAGE_NAME}:${VERSION}
                    docker tag myapp ${IMAGE_NAME}:latest
                '''
            }
        }
        stage('Run app with Docker compose') {
            steps {
                sh '''
                    docker compose down || true
                    docker compose up -d
                '''
            }
        }
        stage('Run Tests') {
            steps {
                sh '''
                    python3 -m venv .venv
                    . .venv/bin/activate
                    pip install -r testing/requirements.txt
                    pytest ./testing
                '''
            }
        }
       stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo "üîê Logging in to DockerHub..."
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

                        echo "üì§ Pushing image: ${IMAGE_NAME}:${VERSION}"
                        docker push ${IMAGE_NAME}:${VERSION}

                        echo "üì§ Pushing image: ${IMAGE_NAME}:latest"
                        docker push ${IMAGE_NAME}:latest

                        docker logout
                    '''
                }
            }
        }
        
       stage('Trigger CD by updating image tag') {
    steps {
        withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
            sh '''
                rm -rf my_ToDo_app-CD
                git config user.email "ci@bot.com"
                git config user.name "CI Bot"
                git clone https://${GIT_USER}:${GIT_PASS}@github.com/Topaz24/my_ToDo_app-CD.git
                cd my_ToDo_app-CD
                sed -i "s/tag:.*/tag: \\"${VERSION}\\"/" K8s/app-argoCD/todo-app/values.yaml
                git add K8s/app-argoCD/todo-app/values.yaml
                git commit -m "CI: Update image tag to ${VERSION}"
                git push origin main
            '''
        }
    }
}

}


        }
        
        post {
    failure {
        slackSend(
            channel: '#ci-cd-pipeline',
            color: 'danger',
            message: "*${JOB_NAME}* build #${BUILD_NUMBER} ‚ùå FAILED\nDetails: ${BUILD_URL}"
        )
    }
    success {
        slackSend(
            channel: '#ci-cd-pipeline',
            color: 'good',
            message: "*${JOB_NAME}* build #${BUILD_NUMBER} ‚úÖ PASSED\nDeployed to: http://stage.Topaz24.online/"
        )
    }
}
